# V1 -> V3: 
# - input validation with lambda
# - save order to DynamoDB table

Resources:
  LegoOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "LegoOrders-${AWS::StackName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  LegoOrderFunctionRole:
    DependsOn: LegoOrdersTable
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LegoOrderFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt LegoOrdersTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LegoOrderFunction:
    DependsOn: LegoOrderFunctionRole
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LegoOrderFunction
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LegoOrderFunctionRole.Arn
      Code:
        ZipFile: |
          import os
          import boto3
          import uuid
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          dynamodb_client = boto3.client("dynamodb")
          TABLE_NAME = os.environ["TABLE_NAME"]

          LEGO_SIZES = ["small", "medium", "large"]
          LEGO_MODELS = ["ship", "tank", "rocket"]

          class Slot:
              LegoSize = "LegoSize"
              LegoModel = "LegoModel"

          def __extract_slot_value(slots, slot_name):
              slot = slots.get(slot_name)
              if not slot:
                  return None
              return slot["value"]["originalValue"].lower()

          def __build_validation_result(is_valid, invalid_slot=None, message=None):
              result = {"isValid": is_valid}
              if invalid_slot:
                  result["invalidSlot"] = invalid_slot
              if message:
                  result["message"] = message
              return result

          def __validate_order(slots):
              lego_size = __extract_slot_value(slots, slot_name=Slot.LegoSize)
              if not lego_size:
                  logger.debug(f"Missing {Slot.LegoSize} slot.")
                  return __build_validation_result(
                      is_valid=False,
                      invalid_slot=Slot.LegoSize,
                      message=f"Which {Slot.LegoSize} do you want ({', '.join(LEGO_SIZES)})?",
                  )
              if lego_size not in LEGO_SIZES:
                  logger.debug(f"Invalid {Slot.LegoSize}: {lego_size}")
                  return __build_validation_result(
                      is_valid=False,
                      invalid_slot=Slot.LegoSize,
                      message=f"Please select {', '.join(LEGO_SIZES)}",
                  )

              lego_model = __extract_slot_value(slots, slot_name=Slot.LegoModel)
              if not lego_model:
                  logger.debug(f"Missing {Slot.LegoModel} slot.")
                  return __build_validation_result(
                      is_valid=False,
                      invalid_slot=Slot.LegoModel,
                      message=f"Which {Slot.LegoModel} do you want ({', '.join(LEGO_MODELS)})?",
                  )
              if lego_model not in LEGO_MODELS:
                  logger.debug(f"Invalid {Slot.LegoModel}: {lego_model}")
                  return __build_validation_result(
                      is_valid=False,
                      invalid_slot=Slot.LegoModel,
                      message=f"Please select {', '.join(LEGO_MODELS)}",
                  )

              logger.debug("Order validation passed.")
              return __build_validation_result(True)

          def __save_order(slots):
              id = str(uuid.uuid4())
              lego_size = __extract_slot_value(slots, slot_name=Slot.LegoSize)
              lego_model = __extract_slot_value(slots, slot_name=Slot.LegoModel)

              string_type = "S"
              item = {
                  "id": {string_type: id},
                  "lego_size": {string_type: lego_size},
                  "lego_model": {string_type: lego_model},
              }

              dynamodb_client.put_item(TableName=TABLE_NAME, Item=item)
              logger.info(f"Order {id} saved to DynamoDB")

          def __build_elicit_slot_response(intent_name, slots, slot_to_elicit, message=None):
              response = {
                  "sessionState": {
                      "dialogAction": {
                          "type": "ElicitSlot",
                          "slotToElicit": slot_to_elicit,
                      },
                      "intent": {
                          "name": intent_name,
                          "slots": slots,
                      },
                  }
              }
              if message:
                  response["messages"] = [{
                      "contentType": "PlainText",
                      "content": message,
                  }]
              return response

          def __build_delegate_response(intent_name, slots):
              return {
                  "sessionState": {
                      "dialogAction": {
                          "type": "Delegate",
                      },
                      "intent": {"name": intent_name, "slots": slots},
                  }
              }

          def __build_fulfillment_response(intent_name, slots, message):
              return {
                  "sessionState": {
                      "dialogAction": {
                          "type": "Close",
                      },
                      "intent": {
                          "name": intent_name,
                          "slots": slots,
                          "state": "Fulfilled",
                      },
                  },
                  "messages": [
                      {
                          "contentType": "PlainText",
                          "content": message,
                      }
                  ],
              }

          def lambda_handler(event, context):
              logger.debug(f"Received event: {event}")
              intent = event["sessionState"]["intent"]
              intent_name = intent["name"]
              slots = intent["slots"]
              invocation_source = event["invocationSource"]

              if invocation_source == "DialogCodeHook":
                  order_validation_result = __validate_order(slots)
                  if not order_validation_result["isValid"]:
                      return __build_elicit_slot_response(
                          intent_name,
                          slots,
                          slot_to_elicit=order_validation_result["invalidSlot"],
                          message=order_validation_result.get("message"),
                      )
                  return __build_delegate_response(intent_name, slots)

              elif invocation_source == "FulfillmentCodeHook":
                  __save_order(slots)
                  return __build_fulfillment_response(
                      intent_name, slots, message="I've placed your order"
                  )
      Environment:
        Variables:
          TABLE_NAME: !Ref LegoOrdersTable

  BotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LexRuntimeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "polly:SynthesizeSpeech"
                  - "comprehend:DetectSentiment"
                Resource: "*"

  LegoBot:
    DependsOn: BotRuntimeRole
    Type: AWS::Lex::Bot
    Properties:
      Name: !Sub "LegoBot-${AWS::StackName}"
      RoleArn: !GetAtt BotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      AutoBuildBotLocales: false
      BotLocales:
        - LocaleId: "en_US"
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: "Ivy"
          SlotTypes:
            - Name: "LegoSizes"
              SlotTypeValues:
                - SampleValue:
                    Value: small
                - SampleValue:
                    Value: medium
                - SampleValue:
                    Value: large
              ValueSelectionSetting:
                ResolutionStrategy: ORIGINAL_VALUE
            - Name: "LegoModels"
              SlotTypeValues:
                - SampleValue:
                    Value: ship
                - SampleValue:
                    Value: tank
                - SampleValue:
                    Value: rocket
              ValueSelectionSetting:
                ResolutionStrategy: ORIGINAL_VALUE
          Intents:
            - Name: "OrderLego"
              SampleUtterances:
                - Utterance: "Lego"
                - Utterance: "I'd like to order a lego"
                - Utterance: "I want a {LegoSize} lego"
                - Utterance: "I want a {LegoModel} lego"
                - Utterance: "I want a {LegoSize} {LegoModel} lego"
              IntentConfirmationSetting:
                PromptSpecification:
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Would you like me to order your {LegoSize} {LegoModel}?"
                  MaxRetries: 3
                  AllowInterrupt: false
                DeclinationResponse:
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Good luck finding it yourself."
                  AllowInterrupt: false
              SlotPriorities:
                - Priority: 1
                  SlotName: LegoModel
                - Priority: 2
                  SlotName: LegoSize
              Slots:
                - Name: "LegoSize"
                  SlotTypeName: "LegoSizes"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Which lego size do you want?"
                      MaxRetries: 3
                      AllowInterrupt: false
                - Name: "LegoModel"
                  SlotTypeName: "LegoModels"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Which lego model do you want?"
                      MaxRetries: 3
                      AllowInterrupt: false
              DialogCodeHook:
                Enabled: true
              FulfillmentCodeHook:
                Enabled: true
                IsActive: true
                PostFulfillmentStatusSpecification:
                  SuccessResponse:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Your order is on the way."
                      AllowInterrupt: false
                  FailureResponse:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Something went wrong. Try again."
                      AllowInterrupt: false
            - Name: "FallbackIntent"
              ParentIntentSignature: "AMAZON.FallbackIntent"
              IntentClosingSetting:
                ClosingResponse:
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Sorry, I can't help you with that."
                  AllowInterrupt: false

  LegoBotVersion:
    DependsOn: LegoBot
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref LegoBot
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT

  FirstBotAlias:
    DependsOn: 
      - LegoBotVersion
      - LegoOrderFunction
    Type: AWS::Lex::BotAlias
    Properties:
      BotAliasName: "LegoBotVersion1Alias"
      BotId: !Ref LegoBot
      BotVersion: !GetAtt LegoBotVersion.BotVersion
      BotAliasLocaleSettings:
        - LocaleId: en_US
          BotAliasLocaleSetting:
            Enabled: true
            CodeHookSpecification:
              LambdaCodeHook: 
                LambdaArn: !GetAtt LegoOrderFunction.Arn
                CodeHookInterfaceVersion: "1.0"

  LegoOrderFunctionInvokePermission:
    DependsOn: 
      - LegoOrderFunction
      - FirstBotAlias
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LegoOrderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: lexv2.amazonaws.com
      SourceArn: !GetAtt FirstBotAlias.Arn
